# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    # - name: Setup cmake
    #   uses: lukka/get-cmake@latest

    - name: Build project
      uses: nicledomaS/cmake_build_action@v1.4

    # - name: move static lib to main folder
    #   run: mv build/libPhylolib.a libPhylolib.a


    # - name: Build project
    #   run: tar -czf libPhylolib.tar.gz includes libPhylolib.a

    - name: Check directory
      run: ls -l

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        path: build/*.tar.gz
        name: libPhylolib.tar.gz

    # - name: Generate release tag
    #   id: generate_release_tag
    #   uses: alexvingg/next-release-tag@v1.0.4
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}

    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ steps.generate_release_tag.outputs.release_tag }}
    #     release_name: Release ${{ steps.generate_release_tag.outputs.release_tag }}
    #     prerelease: true

    # - name: Upload Release Asset
    #   id: upload-release-asset 
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #     asset_path: ./libPhylolib.tar.gz
    #     asset_name: libPhylolib_${{ steps.generate_release_tag.outputs.release_tag }}.tar.gz
    #     asset_content_type: application/zip